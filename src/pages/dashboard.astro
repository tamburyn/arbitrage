---
import Layout from "../layouts/Layout.astro";
import { SimpleSidebar } from "../components/ui/SimpleSidebar";

// Disable prerendering for this page to enable SSR
export const prerender = false;

// Dashboard is now accessible to all users (authenticated and unauthenticated)
// User will be available in locals if authenticated, null if not
const { user } = Astro.locals;

// Prepare user data for client-side components
const userData = user ? { id: user.id, email: user.email } : null;
---

<Layout title="Crypto Arbitrage Dashboard">
  <SimpleSidebar client:idle user={userData}>
    <div class="h-full bg-background overflow-auto">
      <div class="lg:hidden mb-16"></div> <!-- Spacer for mobile hamburger -->
      
      <!-- Dashboard Content -->
      <div class="p-6 space-y-6" id="arbitrage-dashboard">
        <!-- Filter Status Indicator -->
        <div id="filter-indicator" class="hidden p-3 bg-amber-50 border border-amber-200 rounded-lg">
          <div class="flex items-center gap-2">
            <svg class="h-4 w-4 text-amber-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.196-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.915a1 1 0 00.95-.69l1.519-4.674z" />
            </svg>
            <span class="text-sm text-amber-700 font-medium">Showing only favourite exchanges and assets</span>
          </div>
        </div>
        
        <!-- Loading placeholder - will be replaced by React components -->
        <div class="animate-pulse space-y-6">
          <div class="h-8 bg-muted rounded w-64 mb-6"></div>
          
          <!-- Summary cards placeholder -->
          <div class="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
            <div class="h-32 bg-muted rounded-lg"></div>
            <div class="h-32 bg-muted rounded-lg"></div>
            <div class="h-32 bg-muted rounded-lg"></div>
            <div class="h-32 bg-muted rounded-lg"></div>
          </div>
          
          <!-- Charts and table placeholder -->
          <div class="grid gap-6 lg:grid-cols-2">
            <div class="h-96 bg-muted rounded-lg"></div>
            <div class="h-96 bg-muted rounded-lg"></div>
          </div>
          
          <!-- Table placeholder -->
          <div class="h-96 bg-muted rounded-lg"></div>
        </div>
      </div>
    </div>
  </SimpleSidebar>
</Layout>

<!-- Pass user data to client script -->
<script type="application/json" id="user-data" set:html={JSON.stringify(userData)}></script>

<script>
  // Filter state management
  let showFavouritesOnly = false;
  
  // This script will mount the React ArbitrageDashboard component
  import('../components/dashboard/ArbitrageDashboard').then(({ mountArbitrageDashboard }) => {
    const container = document.getElementById('arbitrage-dashboard');
    if (container) {
      // Get user data from script tag
      const userDataScript = document.getElementById('user-data');
      const userData = userDataScript ? JSON.parse(userDataScript.textContent || 'null') : null;
      mountArbitrageDashboard(container, userData);
    }
  });
  
  // Setup filter event listener
  function setupFilterListener() {
    console.log('Setting up filter event listener');
    
    // Handle filter changes from sidebar
    window.addEventListener('filterChange', (event) => {
      console.log('Filter event received:', event);
      showFavouritesOnly = (event as CustomEvent).detail.showFavouritesOnly;
      console.log('New filter state:', showFavouritesOnly);
      const indicator = document.getElementById('filter-indicator');
      
      if (indicator) {
        if (showFavouritesOnly) {
          indicator.classList.remove('hidden');
        } else {
          indicator.classList.add('hidden');
        }
      }
      
          // Dashboard will react to the filter change via ArbitrageContext
    console.log('Filter indicator updated, React context will handle the rest');
    });
  }
  
  // Setup listener when DOM is ready or immediately if already loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupFilterListener);
  } else {
    setupFilterListener();
  }
</script> 