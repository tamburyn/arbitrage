name: Pull Request Validation

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

jobs:
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        env:
          NODE_ENV: test
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: npm run test:coverage

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 7

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: test-results/
          retention-days: 7



  status-comment:
    name: PR Status Comment
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: always() && github.event_name == 'pull_request'
    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download unit test results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: unit-test-results
          path: ./artifacts/unit-test-results/

      - name: Download unit test coverage
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: unit-test-coverage
          path: ./artifacts/unit-test-coverage/

      - name: Create PR status comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
          UNIT_TEST_STATUS: ${{ needs.unit-tests.result }}
        run: |
          # Generate status report
          STATUS_EMOJI="‚úÖ"
          if [[ "$UNIT_TEST_STATUS" != "success" ]]; then
            STATUS_EMOJI="‚ùå"
          fi
          
          # Create comment body
          cat << EOF > comment_body.md
          ## $STATUS_EMOJI Pull Request Validation Results
          
          ### üìä Test Results Summary
          - **Linting**: ‚úÖ Passed
          - **Unit Tests**: $(if [[ "$UNIT_TEST_STATUS" == "success" ]]; then echo "‚úÖ Passed"; else echo "‚ùå Failed"; fi)
          
          ### üìà Coverage Report
          $(if [[ -f "./artifacts/unit-test-coverage/lcov-report/index.html" ]]; then
            echo "Coverage report available in artifacts"
          else
            echo "Coverage report not available"
          fi)
          

          
          **Workflow run**: [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ---
          *This comment was automatically generated by GitHub Actions*
          EOF
          
          # Post comment to PR
          gh pr comment $PR_NUMBER --body-file comment_body.md --repo ${{ github.repository }}

      - name: Update PR status check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          UNIT_TEST_STATUS: ${{ needs.unit-tests.result }}
        run: |
          if [[ "$UNIT_TEST_STATUS" == "success" ]]; then
            echo "‚úÖ All checks passed - PR ready for review"
            exit 0
          else
            echo "‚ùå Some checks failed - review required"
            exit 1
          fi