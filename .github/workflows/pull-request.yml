name: Pull Request Validation

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

jobs:
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        env:
          NODE_ENV: test
          SUPABASE_URL: ${{ secrets.SUPABASE_URL_INTEGRATION }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY_INTEGRATION }}
        run: npm run test:coverage

      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 7

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: test-results/
          retention-days: 7

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: lint
    environment: integration
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install chromium

      - name: Build application
        env:
          NODE_ENV: integration
          SUPABASE_URL: ${{ secrets.SUPABASE_URL_INTEGRATION }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY_INTEGRATION }}
          BINANCE_API_KEY: ${{ secrets.BINANCE_API_KEY_INTEGRATION }}
          BINANCE_SECRET_KEY: ${{ secrets.BINANCE_SECRET_KEY_INTEGRATION }}
          BYBIT_API_KEY: ${{ secrets.BYBIT_API_KEY_INTEGRATION }}
          BYBIT_SECRET_KEY: ${{ secrets.BYBIT_SECRET_KEY_INTEGRATION }}
          KRAKEN_API_KEY: ${{ secrets.KRAKEN_API_KEY_INTEGRATION }}
          KRAKEN_SECRET_KEY: ${{ secrets.KRAKEN_SECRET_KEY_INTEGRATION }}
          OKX_API_KEY: ${{ secrets.OKX_API_KEY_INTEGRATION }}
          OKX_SECRET_KEY: ${{ secrets.OKX_SECRET_KEY_INTEGRATION }}
          OKX_PASSPHRASE: ${{ secrets.OKX_PASSPHRASE_INTEGRATION }}
          LOG_LEVEL: info
          ENABLE_HEALTH_CHECK: true
          HEALTH_CHECK_PORT: 3001
        run: npm run build

      - name: Run E2E tests
        env:
          CI: true
          NODE_ENV: integration
          SUPABASE_URL: ${{ secrets.SUPABASE_URL_INTEGRATION }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY_INTEGRATION }}
          BINANCE_API_KEY: ${{ secrets.BINANCE_API_KEY_INTEGRATION }}
          BINANCE_SECRET_KEY: ${{ secrets.BINANCE_SECRET_KEY_INTEGRATION }}
          BYBIT_API_KEY: ${{ secrets.BYBIT_API_KEY_INTEGRATION }}
          BYBIT_SECRET_KEY: ${{ secrets.BYBIT_SECRET_KEY_INTEGRATION }}
          KRAKEN_API_KEY: ${{ secrets.KRAKEN_API_KEY_INTEGRATION }}
          KRAKEN_SECRET_KEY: ${{ secrets.KRAKEN_SECRET_KEY_INTEGRATION }}
          OKX_API_KEY: ${{ secrets.OKX_API_KEY_INTEGRATION }}
          OKX_SECRET_KEY: ${{ secrets.OKX_SECRET_KEY_INTEGRATION }}
          OKX_PASSPHRASE: ${{ secrets.OKX_PASSPHRASE_INTEGRATION }}
          LOG_LEVEL: info
          ENABLE_HEALTH_CHECK: true
          HEALTH_CHECK_PORT: 3001
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

      - name: Upload E2E coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-coverage
          path: playwright-report/
          retention-days: 7

  status-comment:
    name: PR Status Comment
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    if: always() && github.event_name == 'pull_request'
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download unit test results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: unit-test-results
          path: ./artifacts/unit-test-results/

      - name: Download unit test coverage
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: unit-test-coverage
          path: ./artifacts/unit-test-coverage/

      - name: Download E2E test results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: e2e-test-results
          path: ./artifacts/e2e-test-results/

      - name: Parse test results and create status comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
          UNIT_TEST_STATUS: ${{ needs.unit-tests.result }}
          E2E_TEST_STATUS: ${{ needs.e2e-tests.result }}
        run: |
          # Create status comment content
          COMMENT_BODY="## üß™ Test Results for PR #${PR_NUMBER}

          ### Test Status Summary
          "
          
          # Unit Tests Status
          if [ "$UNIT_TEST_STATUS" = "success" ]; then
            COMMENT_BODY="${COMMENT_BODY}
          ‚úÖ **Unit Tests**: PASSED"
          else
            COMMENT_BODY="${COMMENT_BODY}
          ‚ùå **Unit Tests**: FAILED"
          fi
          
          # E2E Tests Status
          if [ "$E2E_TEST_STATUS" = "success" ]; then
            COMMENT_BODY="${COMMENT_BODY}
          ‚úÖ **E2E Tests**: PASSED"
          else
            COMMENT_BODY="${COMMENT_BODY}
          ‚ùå **E2E Tests**: FAILED"
          fi
          
          # Overall Status
          if [ "$UNIT_TEST_STATUS" = "success" ] && [ "$E2E_TEST_STATUS" = "success" ]; then
            COMMENT_BODY="${COMMENT_BODY}

          ### üéâ Overall Status: **ALL TESTS PASSED**
          This PR is ready for review!"
          else
            COMMENT_BODY="${COMMENT_BODY}

          ### ‚ö†Ô∏è Overall Status: **TESTS FAILED**
          Please check the failed tests and fix the issues before requesting review."
          fi
          
          # Add coverage info if available
          if [ -f "./artifacts/unit-test-coverage/lcov-report/index.html" ]; then
            COVERAGE_PERCENT=$(grep -o "headerCovTableEntryLo.*>[0-9.]*%" ./artifacts/unit-test-coverage/lcov-report/index.html | head -1 | grep -o "[0-9.]*%" || echo "N/A")
            COMMENT_BODY="${COMMENT_BODY}

          ### üìä Coverage Report
          - **Unit Test Coverage**: ${COVERAGE_PERCENT}"
          fi
          
          # Add test details
          COMMENT_BODY="${COMMENT_BODY}

          ### üìã Test Details
          - **Lint**: ‚úÖ Passed
          - **Unit Tests**: $([ "$UNIT_TEST_STATUS" = "success" ] && echo "‚úÖ Passed" || echo "‚ùå Failed")
          - **E2E Tests**: $([ "$E2E_TEST_STATUS" = "success" ] && echo "‚úÖ Passed" || echo "‚ùå Failed")

          ### üîó Artifacts
          Check the [Actions tab](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed test reports and coverage information.

          ---
          *Automated comment generated by GitHub Actions*"
          
          # Post comment to PR
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments" \
            -d "{\"body\": $(echo "$COMMENT_BODY" | jq -Rs .)}"

      - name: Set PR status check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          UNIT_TEST_STATUS: ${{ needs.unit-tests.result }}
          E2E_TEST_STATUS: ${{ needs.e2e-tests.result }}
        run: |
          # Determine overall status
          if [ "$UNIT_TEST_STATUS" = "success" ] && [ "$E2E_TEST_STATUS" = "success" ]; then
            STATUS="success"
            DESCRIPTION="All tests passed successfully"
          else
            STATUS="failure"
            DESCRIPTION="Some tests failed"
          fi
          
          # Set status check
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }}" \
            -d "{
              \"state\": \"$STATUS\",
              \"target_url\": \"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\",
              \"description\": \"$DESCRIPTION\",
              \"context\": \"continuous-integration/pr-validation\"
            }"
