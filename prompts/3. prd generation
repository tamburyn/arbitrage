Jesteś doświadczonym menedżerem produktu, którego zadaniem jest stworzenie kompleksowego dokumentu wymagań produktu (PRD) w oparciu o poniższe opisy:

<project_description>
Nasza platforma do arbitrażu giełdowego to profesjonalne narzędzie zaprojektowane do monitorowania, analizy i szybkiej reakcji na okazje arbitrażowe na rynkach kryptowalut. Skupiając się na integracji danych z głównie scentralizowanych giełd (CEX), takich jak Binance, Kraken, OKX, ByBit, Zonda i inne, system oferuje:

• Monitorowanie rynku w czasie rzeczywistym z wizualizacją spreadów, głębokości order booka oraz analizą płynności,
• Natychmiastowe powiadomienia (alerty) o wykrytych okazjach arbitrażowych, umożliwiające szybką reakcję,
• Pełną widoczność rynku oraz dostęp do dokładnych danych o płynności i głębokości order booków, co pozwala na precyzyjne podejmowanie decyzji handlowych,
• Zintegrowane funkcjonalności skierowane zarówno do użytkowników indywidualnych (B2C), jak i firm arbitrażowych (B2B), bez tworzenia oddzielnych interfejsów,
• Integrację z narzędziami do zaawansowanej analityki, takimi jak PostHog, umożliwiającą monitorowanie zachowań użytkowników, przeprowadzanie ankiet oraz zgłaszanie błędów,
• Zagadnienia związane z bezpieczeństwem i stabilnością systemu, które choć istotne, nie są priorytetem na obecnym etapie, a zostaną rozwinięte w kolejnych iteracjach.

Dzięki tym funkcjonalnościom platforma stanowi idealne rozwiązanie zarówno dla indywidualnych traderów, ceniących intuicyjną wizualizację i szybkie powiadomienia, jak i dla profesjonalnych firm oraz zespołów handlowych, poszukujących narzędzia umożliwiającego efektywną analizę rynkową i automatyzację procesów arbitrażowych. 

</project_description>

<project_details>


<conversation_summary>
<decisions>
1. MVP obsługuje dwa segmenty (kryptoentuzjaści & profesjonaliści) w jednym wspólnym interfejsie.
2. Wersja 1 integruje giełdy: Binance, Kraken, OKX, ByBit, Zonda.
3. Monitorowane aktywa: top 10 kryptowalut każdej z obsługiwanych giełd.
4. Cykliczne pobieranie pełnych orderbooków co 30 s (stały interwał dla wszystkich giełd).
5. Funkcjonalność MVP ogranicza się do wykrywania arbitrażu; brak auto-executingu.
6. Kanały powiadomień: e-mail i Telegram; alert wysyłany, gdy spread ≥ 2 % (próg konfigurowany suwakiem).
7. Alert zawiera: procent spreadu, głębokość książki, szacowany wolumen do realizacji, estymowany zysk, wskaźnik zaufania.
8. Użytkownik może filtrować dane po giełdach, assetach, spreadach i cenach; pełny orderbook prezentowany domyślnie.
9. Kluczowe metryki biznesowe: MAU, retencja, liczba wygenerowanych alertów, konwersja do płatnej subskrypcji.
10. Model pricing: freemium (dostęp do danych + podgląd 3 alertów z 24 h) oraz subskrypcja płatna opłacana przez Metamask (krypto).
11. Dostępność systemu docelowo 100 %; czas załadowania dashboardu < 3 s.
12. Front-end: responsywna web-app, light-mode, język angielski.
13. Dane historyczne orderbooków przechowywane przez 3 miesiące; eksport CSV dostępny dla użytkownika.
14. Brak publicznego API w MVP; brak trybu dark / white-label.
15. Panel administracyjny ograniczony do edycji domyślnych progów; formularz zgłoszeniowy dla użytkownika końcowego; monitoring błędów wyłącznie wewnętrzny.
16. Kamienie milowe produktu definiowane liczbą obsługiwanych giełd i pełnym pokryciem ich assetów; zunifikowana kalkulacja arbitrażu w USDT wykonywana backendowo.
</decisions>
<matched_recommendations>
1. Zastosowanie zunifikowanej kalkulacji USDT przy użyciu kursów live (Rek. 4).
2. Udostępnienie pełnego filtrowania i watchlist użytkownika (Rek. 5).
3. Implementacja bota Telegram z krótkimi akcjami inline (Rek. 3).
4. Wprowadzenie trust-score alertu (Rek. 16).
5. Freemium ograniczające alerty do 3 / 24 h i brak historii głębokości (Rek. 13).
6. Kompresja oraz cache dla danych historycznych, np. Parquet (Rek. 15).
7. Panel admin z rolą edycji progów i monitoringiem jakości danych (Rek. 17).
8. KPI „dashboard load time” monitorowany w PostHog (< 3 s) (Rek. 20).
9. Retry & cache polityka dla błędów API (Rek. 8).
10. Mapowanie roadmapy na kolejne giełdy/asset-coverage (Rek. 9).
</matched_recommendations>
<prd_planning_summary>
Produkt: platforma webowa do arbitrażu na CEX-ach, dostarczająca dane rynkowe i alerty arbitrażowe w 30-sekundowych cyklach.
1. Główne wymagania funkcjonalne
* Integracja z 5 giełdami i top 100 coinów (pełny orderbook).
* Backend pobiera orderbooky co 30 s, oblicza spready arbitrażowe w USDT, uwzględnia głębokość i wolumen.
* Generowanie alertu, gdy spread ≥ 2 % i spełnia wolumen USD; wysyłka na e-mail i Telegram.
* Front-end (light-mode, EN) pokazuje dashboard z:
* tabelą okazji z trust-score, głębokością, volumenem, prognozowanym zyskiem
* wykres z wizualizacją okazji arbitrażowych
* pełnym orderbookiem w podglądzie szczegółowym
* filtrami giełd, assetów, spreadów, cen
* Konto freemium: dostęp do danych + 3 historyczne alerty/24 h; konto płatne (Metamask) odblokowuje alerty w czasie rzeczywistym.
* Eksport danych historycznych (3 mies.) do CSV.
* Panel admin do zmiany domyślnych progów i monitoringu jakości danych.
1. Kluczowe historie użytkownika
* Jako kryptoentuzjasta chcę szybkie powiadomienie Telegram, gdy spread ≥ 2 %, abym mógł ręcznie zareagować.
* Jako profesjonalny trader chcę widzieć pełną głębokość orderbooków i estymowany wolumen, aby ocenić wykonalność transakcji.
* Jako nowy użytkownik freemium chcę zobaczyć 3 najlepsze historyczne alerty, by zrozumieć wartość produktu i skłonić się do zakupu subskrypcji.
* Jako admin chcę edytować domyślne progi spreadów, aby kalibrować liczbę alertów.
1. Kryteria sukcesu i metryki
* MAU oraz 30-dniowa retencja ≥ 30 %.
* Konwersja freemium → płatne ≥ 10 % po 30 dniach.
* Średni czas dostarczenia alertu (dane → Telegram/e-mail) ≤ 5 s od zakończenia cyklu 30 s.
* Dashboard load time ≤ 3 s przy pełnym orderbooku (5 giełd × 100 coinów).
* Uptime systemu 100 % w okresie obserwacji MVP.
1. Nierozwiązane kwestie
Patrz sekcja <unresolved_issues>.
</prd_planning_summary>
<unresolved_issues>
1. Dokładna wartość wolumenowego buforu (USD) użytego przy estymacji zysku nie została ustalona.
2. Szczegóły techniczne obsługi płatnej subskrypcji przez Metamask (odnowienia, waluty, regiony).
3. Strategia GDPR dla przechowywania eventów PostHog i danych orderbook (> 3 miesiące) nie została określona.
4. Brak polityki rate-limitów alertów może prowadzić do spamu; wymaga ponownej oceny.
5. Nie ustalono, czy adaptacyjne interwały (websocket vs REST) mają być rozważone w kolejnych fazach, zważywszy na wymóg 30 s.
6. Mechanizm kolorystycznego/trust-score w UI wymaga specyfikacji algorytmu i progów wizualnych.
7. Zakres ról w panelu admin (poza edycją progów) oraz uprawnienia do danych historycznych pozostają otwarte.
</unresolved_issues>
</conversation_summary>




</project_details>

Wykonaj następujące kroki, aby stworzyć kompleksowy i dobrze zorganizowany dokument:

1. Podziel PRD na następujące sekcje:
   a. Przegląd projektu
   b. Problem użytkownika
   c. Wymagania funkcjonalne
   d. Granice projektu
   e. Historie użytkownika
   f. Metryki sukcesu

2. W każdej sekcji należy podać szczegółowe i istotne informacje w oparciu o opis projektu i odpowiedzi na pytania wyjaśniające. Upewnij się, że:
   - Używasz jasnego i zwięzłego języka
   - W razie potrzeby podajesz konkretne szczegóły i dane
   - Zachowujesz spójność w całym dokumencie
   - Odnosisz się do wszystkich punktów wymienionych w każdej sekcji

3. Podczas tworzenia historyjek użytkownika i kryteriów akceptacji
   - Wymień WSZYSTKIE niezbędne historyjki użytkownika, w tym scenariusze podstawowe, alternatywne i skrajne.
   - Przypisz unikalny identyfikator wymagań (np. US-001) do każdej historyjki użytkownika w celu bezpośredniej identyfikowalności.
   - Uwzględnij co najmniej jedną historię użytkownika specjalnie dla bezpiecznego dostępu lub uwierzytelniania, jeśli aplikacja wymaga identyfikacji użytkownika lub ograniczeń dostępu.
   - Upewnij się, że żadna potencjalna interakcja użytkownika nie została pominięta.
   - Upewnij się, że każda historia użytkownika jest testowalna.

Użyj następującej struktury dla każdej historii użytkownika:
- ID
- Tytuł
- Opis
- Kryteria akceptacji

4. Po ukończeniu PRD przejrzyj go pod kątem tej listy kontrolnej:
   - Czy każdą historię użytkownika można przetestować?
   - Czy kryteria akceptacji są jasne i konkretne?
   - Czy mamy wystarczająco dużo historyjek użytkownika, aby zbudować w pełni funkcjonalną aplikację?
   - Czy uwzględniliśmy wymagania dotyczące uwierzytelniania i autoryzacji (jeśli dotyczy)?

5. Formatowanie PRD:
   - Zachowaj spójne formatowanie i numerację.
   - Nie używaj pogrubionego formatowania w markdown ( ** ).
   - Wymień WSZYSTKIE historyjki użytkownika.
   - Sformatuj PRD w poprawnym markdown.

Przygotuj PRD z następującą strukturą:

```markdown
# Dokument wymagań produktu (PRD) - {{app-name}}
## 1. Przegląd produktu
## 2. Problem użytkownika
## 3. Wymagania funkcjonalne
## 4. Granice produktu
## 5. Historyjki użytkowników
## 6. Metryki sukcesu
```

Pamiętaj, aby wypełnić każdą sekcję szczegółowymi, istotnymi informacjami w oparciu o opis projektu i nasze pytania wyjaśniające. Upewnij się, że PRD jest wyczerpujący, jasny i zawiera wszystkie istotne informacje potrzebne do dalszej pracy nad produktem.

Ostateczny wynik powinien składać się wyłącznie z PRD zgodnego ze wskazanym formatem w markdown, który zapiszesz w pliku .ai/prd.md