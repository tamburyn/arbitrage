Jesteś wykwalifikowanym architektem frontend, którego zadaniem jest stworzenie kompleksowej architektury interfejsu użytkownika w oparciu o dokument wymagań produktu (PRD), plan API i notatki z sesji planowania. Twoim celem jest zaprojektowanie struktury interfejsu użytkownika, która skutecznie spełnia wymagania produktu, jest zgodna z możliwościami API i zawiera spostrzeżenia z sesji planowania.

Najpierw dokładnie przejrzyj następujące dokumenty:

Dokument wymagań produktu (PRD):
<prd>
@prd.md
</prd>

Plan API:
<api_plan>
@api-plan.md</api_plan>

Session Notes:
<session_notes>

<conversation_summary>
<decisions>
1. Kluczowe widoki MVP obejmują dashboard, ekran logowania/rejestracji oraz ustawienia użytkownika, z możliwością dodania kolejnych ekranów w przyszłości.
2. Przyjęty przepływ użytkownika zakłada: logowanie → dashboard, rejestracja → logowanie → dashboard oraz dashboard → ustawienia użytkownika → dashboard.
3. Nawigacja ma być oparta na bocznym menu, dostępnym i spójnym na wszystkich urządzeniach.
4. Interfejs ma wykorzystywać komponenty takie jak tabele, wykresy, filtry i modale — na razie w uproszczonej wersji, z możliwością rozbudowy o zaawansowane funkcjonalności (np. przybliżanie, zmiana interwałów) w przyszłości.
5. Projekt UI musi cechować się pełną responsywnością, zgodnie z dobrymi praktykami.
6. Do projektowania UI zostanie użyty standard shadcn/ui, bez dodatkowych wymagań personalizacyjnych.
7. Autoryzacja użytkowników będzie realizowana przy użyciu Supabase, wykorzystując JWT.
8. Strategia zarządzania stanem aplikacji zostanie uproszczona (proste, hybrydowe podejście).
9. Obsługa błędów będzie hybrydowa, z wyświetlaniem komunikatów oraz umożliwieniem ponownego ładowania danych.
10. Optymalizacja komunikacji z API zakłada zastosowanie najlepszego rozwiązania, tj. SSR z Astro, lazy loading oraz cache’owanie danych.
</decisions>
<matched_recommendations>
1. Skoncentrować implementację na kluczowych widokach (dashboard, logowanie/rejestracja, ustawienia) z możliwością rozbudowy w przyszłości.
2. Zweryfikować i utrzymać przyjęty przepływ użytkownika przy przechodzeniu między widokami.
3. Wdrożyć spójną boczną nawigację na wszystkich urządzeniach.
4. Wykorzystać interaktywne komponenty (tabele, wykresy, filtry, modale) zgodnie z shadcn/ui, z możliwością rozbudowy o zaawansowane funkcjonalności.
5. Zapewnić pełną responsywność i adaptację interfejsu według dobrych praktyk.
6. Zintegrować system autoryzacji Supabase z JWT w celu zabezpieczenia API oraz tras w UI.
7. Zastosować prostą, hybrydową strategię zarządzania stanem (np. React Context + SWR).
8. Implementować mechanizm obsługi błędów z jasnymi komunikatami i funkcjonalnością ponownego ładowania danych.
9. Zastosować optymalizacje specyficzne dla aplikacji (SSR w Astro, lazy loading, caching) w celu efektywnej komunikacji z API.
</matched_recommendations>
<ui_architecture_planning_summary>
1. Główne wymagania dotyczące architektury UI obejmują stworzenie MVP z widokami dashboardu, logowania/rejestracji i ustawień użytkownika, przy czym dalszy rozwój ekosystemu widoków jest planowany.
2. Kluczowe widoki i przepływy użytkownika zostały ustalone jako: logowanie → dashboard, rejestracja → logowanie → dashboard oraz nawigacja pomiędzy dashboardem a ustawieniami, co stworzy intuicyjną mapę podróży użytkownika.
3. W integracji z API zastosowane zostaną rozwiązania zapewniające synchronizację stanu (poprzez proste, hybrydowe podejście, np. React Context i SWR) oraz częste odświeżanie danych (co 30 sekund).
4. Kwestiami projektowymi są pełna responsywność interfejsu, wykorzystanie sprawdzonych standardów shadcn/ui, a także optymalizacje (SSR, lazy loading, caching) w celu zapewnienia wysokiej wydajności.
5. Bezpieczeństwo i autoryzacja będą obsługiwane przez Supabase przy użyciu JWT, co zapewni ochronę danych użytkownika zarówno na poziomie API, jak i interfejsu.
6. Interaktywne komponenty, takie jak tabele, wykresy, filtry i modale, będą początkowo proste, ale z możliwością dalszej rozbudowy o bardziej zaawansowane funkcje interakcyjne.
7. System obsługi błędów zapewni wyświetlanie komunikatów oraz mechanizmy ponownego ładowania danych, co poprawi doświadczenie użytkownika podczas awarii.
</ui_architecture_planning_summary>
<unresolved_issues>
1. Szczegóły dotyczące integracji JWT z mechanizmami Supabase oraz sposób zabezpieczenia tras w UI wymagają dalszego ustalenia.
2. Konieczne jest doprecyzowanie szczegółowych breakpointów i strategii responsywności, mimo że obowiązują dobre praktyki.
3. Dalsze wyjaśnienie dotyczące zaawansowanych interakcji komponentów (np. interaktywność wykresów) pozostaje do omówienia w kolejnych etapach rozwoju.
</unresolved_issues>
</conversation_summary>

</session_notes>

Twoim zadaniem jest stworzenie szczegółowej architektury interfejsu użytkownika, która obejmuje niezbędne widoki, mapowanie podróży użytkownika, strukturę nawigacji i kluczowe elementy dla każdego widoku. Projekt powinien uwzględniać doświadczenie użytkownika, dostępność i bezpieczeństwo.

Wykonaj następujące kroki, aby ukończyć zadanie:

1. Dokładnie przeanalizuj PRD, plan API i notatki z sesji.
2. Wyodrębnij i wypisz kluczowe wymagania z PRD.
3. Zidentyfikuj i wymień główne punkty końcowe API i ich cele.
4. Utworzenie listy wszystkich niezbędnych widoków na podstawie PRD, planu API i notatek z sesji.
5. Określenie głównego celu i kluczowych informacji dla każdego widoku.
6. Zaplanuj podróż użytkownika między widokami, w tym podział krok po kroku dla głównego przypadku użycia.
7. Zaprojektuj strukturę nawigacji.
8. Zaproponuj kluczowe elementy interfejsu użytkownika dla każdego widoku, biorąc pod uwagę UX, dostępność i bezpieczeństwo.
9. Rozważ potencjalne przypadki brzegowe lub stany błędów.
10. Upewnij się, że architektura interfejsu użytkownika jest zgodna z planem API.
11. Przejrzenie i zmapowanie wszystkich historyjek użytkownika z PRD do architektury interfejsu użytkownika.
12. Wyraźne mapowanie wymagań na elementy interfejsu użytkownika.
13. Rozważ potencjalne punkty bólu użytkownika i sposób, w jaki interfejs użytkownika je rozwiązuje.

Dla każdego głównego kroku pracuj wewnątrz tagów <ui_architecture_planning> w bloku myślenia, aby rozbić proces myślowy przed przejściem do następnego kroku. Ta sekcja może być dość długa. To w porządku, że ta sekcja może być dość długa.

Przedstaw ostateczną architekturę interfejsu użytkownika w następującym formacie Markdown:

```markdown
# Architektura UI dla [Nazwa produktu]

## 1. Przegląd struktury UI

[Przedstaw ogólny przegląd struktury UI]

## 2. Lista widoków

[Dla każdego widoku podaj:
- Nazwa widoku
- Ścieżka widoku
- Główny cel
- Kluczowe informacje do wyświetlenia
- Kluczowe komponenty widoku
- UX, dostępność i względy bezpieczeństwa]

## 3. Mapa podróży użytkownika

[Opisz przepływ między widokami i kluczowymi interakcjami użytkownika]

## 4. Układ i struktura nawigacji

[Wyjaśnij, w jaki sposób użytkownicy będą poruszać się między widokami]

## 5. Kluczowe komponenty

[Wymień i krótko opisz kluczowe komponenty, które będą używane w wielu widokach].
```

Skup się wyłącznie na architekturze interfejsu użytkownika, podróży użytkownika, nawigacji i kluczowych elementach dla każdego widoku. Nie uwzględniaj szczegółów implementacji, konkretnego projektu wizualnego ani przykładów kodu, chyba że są one kluczowe dla zrozumienia architektury.

Końcowy rezultat powinien składać się wyłącznie z architektury UI w formacie Markdown w języku polskim, którą zapiszesz w pliku .ai/ui-plan.md. Nie powielaj ani nie powtarzaj żadnej pracy wykonanej w bloku myślenia.